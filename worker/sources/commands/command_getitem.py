"""
Request the item
"""

from .command_custom import DwgbCmdCustom, DwgbCmdConst
from ..classes import DwgbDatabase, DwgbTransport, DwgbMessage, DwgbStorage


class DwgbCmdGetItem(DwgbCmdCustom):
    """ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ –∑–æ–ª–æ—Ç–∞ """

    # –†–∞–∑–º–µ—Ä –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç–∞
    __OVERDRAFT = 3000

    def __init__(self, database: DwgbDatabase, transport: DwgbTransport):
        """ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä """
        super().__init__(database, transport)
        self.regGet = self.getRegex(r"^—Ö–æ—á—É (\d+)?(\D+)")

    def work(self, message: DwgbMessage):
        """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è """
        tmp_data = self.regGet.match(message.text)
        if not tmp_data:
            return False
        # –£—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if not tmp_data[1]:
            tmp_count = 1
        else:
            tmp_count = int(tmp_data[1])
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –Ω–∞–π–¥–µ–º –µ–≥–æ –≤ –±–∞–∑–µ
        tmp_type = tmp_data[2].strip().lower()
        tmp_item = self.getStorage(tmp_type)
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ä—É–¥—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        if tmp_item is not None:
            tmp_type = tmp_item.id
        # –ü–µ—Ä–µ–¥–∞—á–∞ –∑–æ–ª–æ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
        if tmp_type == self._ITEM_GOLD:
            return self.getGold(message, tmp_item, tmp_count)
        if tmp_type == self._ITEM_SHARDS:
            return self.getShards(message, tmp_item, tmp_count)
        else:
            return self.getItem(message, tmp_item, tmp_type, tmp_count)

    def getGold(self, message: DwgbMessage, _item: DwgbStorage, _count: int):
        """ –ü–µ—Ä–µ–¥–∞—á–∞ –∑–æ–ª–æ—Ç–∞ """
        self.transport.writeChannel("üò¢–í —Å–≤—è–∑–∏ —Å –ª–µ–Ω—å—é –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–∞ –∞—É–∫–µ, –≤—ã–¥–∞—á–∞ –∑–æ–ª–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞—Ä—Ç–µ—Ä", message, True)
        return True
        # –ï—Å–ª–∏ –∑–æ–ª–æ—Ç–æ –µ—Å—Ç—å - —Å–Ω–∏–º–µ–º
        # count = min(count - self.__MINCOUNT, self.getStorageItem(message.user, type))
        # –ó–∞–ø—Ä–µ—Ç–∏–º –ø–µ—Ä–µ–¥–∞—á—É –µ—Å–ª–∏ –º–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
        # if (count <= 0):
        #     self.transport.writeChannel("%s, –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤. –ù–æ –≤—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å." % (self.getAccountTag(message.user, message.name)), message, False)
        # else:
        #     self.transport.writeChannel("–ü–µ—Ä–µ–¥–∞—Ç—å %s %s" % (count, type), message, True)
        # return True

    def getShards(self, message: DwgbMessage, item: DwgbStorage, count: int):
        """ –ü–µ—Ä–µ–¥–∞—á–∞ –æ—Å–∫–æ–ª–∫–æ–≤ """
        # –ï—Å–ª–∏ –∑–æ–ª–æ—Ç–æ –µ—Å—Ç—å - —Å–Ω–∏–º–µ–º
        count = min(count, item.count)
        tmp_cost = item.cost * count // 100
        tmp_have = self.getStorageItem(message.user, self._ITEM_GOLD)
        # –ó–∞–ø—Ä–µ—Ç–∏–º –ø–µ—Ä–µ–¥–∞—á—É –µ—Å–ª–∏ –º–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
        if tmp_have < tmp_cost:
            self.transport.writeChannel("%s, –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ üåï%s –¥–ª—è –ø–æ–∫—É–ø–∫–∏ %s %s –∑–∞ üåï%s (%s –∑–∞ 100—à—Ç)" % (self.getAccountTag(message.user, message.name), tmp_have, count, item.id, tmp_cost, item.cost), message, False)
        else:
            self.transport.writeChannel("–ü–µ—Ä–µ–¥–∞—Ç—å %s –æ—Å–∫–æ–ª–∫–æ–≤" % count, message, True)
        return True

    def getItem(self, message: DwgbMessage, storage: DwgbStorage, itemtype: str, count: int):
        """ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ """
        if storage:
            if storage.valueex > 0:
                count = min(DwgbCmdConst.STORE_FREE, min(5, min(count, storage.count + storage.valueex)))
            else:
                count = min(count, storage.count)
        else:
            count = 0
        # –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
        if count <= 0:
            if storage and (storage.valueex > 0):
                self.transport.writeChannel("üëù –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∫–Ω–∏–≥", message, False)
            else:
                self.transport.writeChannel("üëù %s –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏" % itemtype, message, False)
            return True
        # –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –æ–ø–∏—Å–∞–Ω –∞ –±–∞–∑–µ
        if not storage.cost:
            self.transport.writeChannel("–ü–µ—Ä–µ–¥–∞—Ç—å %s - %s —à—Ç—É–∫" % (itemtype, count), message, True)
            return True
        # –û–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞–ª–∏—á–∏–µ
        tmp_have = self.getStorageItem(message.user, self._ITEM_GOLD)
        tmp_cost = count * self.getCostOut(storage.cost)
        # –ù–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
        if tmp_cost > tmp_have + self.__OVERDRAFT:
            self.transport.writeChannel("%s, –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ üåï%s –¥–ª—è –ø–æ–∫—É–ø–∫–∏ %s %s –∑–∞ üåï%s (%s –∑–∞ —à—Ç)" % (self.getAccountTag(message.user, message.name), tmp_have, count, storage.id, tmp_cost, self.getCostOut(storage.cost)), message, False)
            return True
        # –°–æ–±–µ—Ä–µ–º –∫–Ω–∏–≥–∏ –µ—Å–ª–∏ –Ω–∞–¥–æ
        if count > storage.count:
            tmp_book_id = self.getBookPresent(storage)
            if tmp_book_id:
                tmp_book_count = 0
                # –°–æ–±–µ—Ä–µ–º –∫–Ω–∏–≥–∏ –ø–æ –æ–¥–Ω–æ–π
                for tmp_i in range(0, min(count - storage.count, storage.valueex)):
                    tmp_book_count += self.apiBuy(tmp_book_id, 0)
                # –£–º–µ–Ω—å—à–∏–º –≤ –±–∞–∑–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—á–Ω—ã—Ö –∫–Ω–∏–≥
                if tmp_book_count > 0:
                    self.setStorage(0, storage.id, 0, -tmp_book_count)
                    self.setStorage(0, self._ITEM_GOLD, -300 * tmp_book_count)
        # –•–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
        self.transport.writeChannel("–ü–µ—Ä–µ–¥–∞—Ç—å %s - %s —à—Ç—É–∫" % (storage.id, count), message, True)
        return True
