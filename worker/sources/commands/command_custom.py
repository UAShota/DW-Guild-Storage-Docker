"""
Base command class
"""

import json
import math
import random
import re
import traceback
from urllib import parse

import requests

from ..classes import DwgbDatabase, DwgbTransport, DwgbMessage, DwgbStorage


class DwgbCmdConst(object):
    """ –ö–ª–∞—Å—Å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç """

    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    ITEM: DwgbStorage = None

    # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏
    PERCENT_BUY = 0.85

    # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂–∏
    PERCENT_SELL = 0.90

    # –ü–æ–∑–∏—Ü–∏–∏ —Å–∫–ª–∞–¥–∞
    STORE_DATA = {}

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–ª–∞–¥–∞
    STORE_SIZE = 214

    # –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ
    STORE_FREE = 0

    # –ö–Ω–∏–≥–∏
    BOOKS = [("13580", "–≥—Ä—è–∑–Ω—ã–π —É–¥–∞—Ä"),
             ("13581", "—Å–ª–∞–±–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ"),
             ("13582", "—É–¥–∞—Ä –≤–∞–º–ø–∏—Ä–∞"),
             ("13583", "–º–æ—â–Ω—ã–π —É–¥–∞—Ä"),
             ("13592", "—Å–∏–ª–∞ —Ç–µ–Ω–µ–π"),
             ("13595", "—Ä–∞—Å–ø—Ä–∞–≤–∞"),
             ("13600", "—Å–ª–µ–ø–æ—Ç–∞"),
             ("13603", "—Ä–∞—Å—Å–µ—á–µ–Ω–∏–µ"),
             ("13606", "–±–µ—Ä—Å–µ—Ä–∫–µ—Ä"),
             ("13609", "—Ç–∞—Ä–∞–Ω"),
             ("13612", "–ø—Ä–æ–∫–ª—è—Ç–∏–µ —Ç—å–º—ã"),
             ("13615", "–æ–≥–æ–Ω–µ–∫ –Ω–∞–¥–µ–∂–¥—ã"),
             ("13619", "—Ü–µ–ª–µ–±–Ω—ã–π –æ–≥–æ–Ω—å"),
             ("13623", "–∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ"),
             ("13626", "–∑–∞—Ä–∞–∂–µ–Ω–∏–µ"),
             ("13628", "—Ä–∞—Å–∫–æ–ª"),
             ("13639", "–±—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"),
             ("13642", "–º–∞—Ä–æ–¥–µ—Ä"),
             ("13644", "–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
             ("13646", "–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"),
             ("13648", "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"),
             ("13650", "–≤–µ–¥—å–º–∞–∫"),
             ("13652", "—Å–æ–±–∏—Ä–∞—Ç–µ–ª—å"),
             ("13654", "–∑–∞–ø–∞—Å–ª–∏–≤–æ—Å—Ç—å"),
             ("13656", "–æ—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –≥–æ–ª–æ–≤–∞–º–∏"),
             ("13658", "–ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç—å"),
             ("13660", "—É–ø–æ—Ä–Ω–æ—Å—Ç—å"),
             ("13662", "—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"),
             ("13664", "—Ä–∞—Å—á–µ—Ç–ª–∏–≤–æ—Å—Ç—å"),
             ("13666", "–ø—Ä–µ–∑—Ä–µ–Ω–∏–µ –∫ –±–æ–ª–∏"),
             ("13670", "—Ä—ã–±–∞–∫"),
             ("13672", "–Ω–µ—É—è–∑–≤–∏–º—ã–π"),
             ("13674", "–∫–æ–ª—é—â–∏–π —É–¥–∞—Ä"),
             ("13677", "–±–µ—Å—Å—Ç—Ä–∞—à–∏–µ"),
             ("13679", "—Ä–µ–∂—É—â–∏–π —É–¥–∞—Ä"),
             ("13681", "—Ñ–µ–Ω–∏–∫—Å"),
             ("13683", "–Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º—ã–π"),
             ("13685", "—Å—É–µ–≤–µ—Ä–Ω–æ—Å—Ç—å"),
             ("13687", "–≥–ª–∞–¥–∏–∞—Ç–æ—Ä"),
             ("13689", "–≤–æ–∑–¥–∞—è–Ω–∏–µ"),
             ("13691", "—É—á–µ–Ω–∏–∫"),
             ("13693", "–ø—Ä–æ—á–Ω–æ—Å—Ç—å"),
             ("13695", "—Ä–∞—Å—Ç–æ—Ä–æ–ø–Ω–æ—Å—Ç—å"),
             ("13697", "—É—Å—Ç—Ä–∞—à–µ–Ω–∏–µ"),
             ("13699", "–∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞"),
             ("14505", "–¥—Ä–æ–±—è—â–∏–π —É–¥–∞—Ä"),
             ("14507", "–∑–∞—â–∏—Ç–Ω–∞—è —Å—Ç–æ–π–∫–∞"),
             ("14777", "—Å—Ç–æ–π–∫–∞ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∏—è"),
             ("14779", "–≤–æ–¥–æ—Ö–ª–µ–±"),
             ("14970", "–∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ"),
             ("14972", "–±—Ä–∞–∫–æ–Ω—å–µ—Ä"),
             ("14986", "–ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"),
             ("14988", "–ª–æ–≤–∫–æ—Å—Ç—å —Ä—É–∫"),
             ("13668", "–æ—à–µ–ª–æ–º–ª–µ–Ω–∏–µ")]


class DwgbCmdCustom(object):
    """ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–æ–º–º–∞–Ω–¥ """

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    __QUERY_STORAGE_CREATE = "CREATE TABLE IF NOT EXISTS dwgb_storages (uid SERIAL PRIMARY KEY, owner INTEGER NOT NULL, item VARCHAR (50) NOT NULL, short VARCHAR (10) DEFAULT NULL, cost INTEGER DEFAULT 0, value INTEGER DEFAULT 0, maxlimit INTEGER DEFAULT 0, trade INTEGER DEFAULT 0, valueex INTEGER DEFAULT 0, code INTEGER DEFAULT 0, date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, icon VARCHAR(4) default 'üåï'); CREATE UNIQUE INDEX IF NOT EXISTS owneritem_idx ON dwgb_storages (owner, item);"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    __QUERY_STORAGE_SET = "INSERT INTO dwgb_storages (owner, item, value) VALUES (%(owner)s, %(item)s, %(value)s)  ON CONFLICT (owner, item) DO UPDATE SET value = dwgb_storages.value + %(value)s, valueex = dwgb_storages.valueex + %(valueex)s"

    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    __QUERY_STORAGE_GET = "SELECT value, valueex FROM dwgb_storages WHERE owner=%(owner)s AND item=%(item)s"

    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–ª–∞–¥–∞
    __QUERY_STORAGE_SHOW = "SELECT * FROM dwgb_storages WHERE owner=%(owner)s ORDER BY icon, item"

    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–∫–ª–∞–¥–∞
    __QUERY_STORAGE_FIND = "SELECT * FROM dwgb_storages WHERE owner=%(owner)s AND (item=%(name)s OR short=%(name)s)"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä –∑–æ–ª–æ—Ç–∞ –¥–ª—è —É—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    _ITEM_GOLD = "–∑–æ–ª–æ—Ç–∞"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä –æ—Å–∫–æ–ª–∫–æ–≤ –¥–ª—è —É—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    _ITEM_SHARDS = "–æ—Å–∫–æ–ª–∫–æ–≤ —Å–µ—Ä–¥—Ü–∞"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä –∑–æ–ª–æ—Ç–∞ –¥–ª—è —É—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    _ITEM_PAGE = "–ø—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"

    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞ –∫–æ–ª–æ–¥—Ü–∞
    _DW_BOT_ID = -183040898

    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞
    _GAME_BOT_ID = -182985865

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä—é–∫–∑–∞–∫
    _API_URL = "https://vip3.activeusers.ru/app.php?act=%s&auth_key=%s&group_id=182985865&api_id=7055214"

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    _ACT_TYPE_ITEM = "item&id=%s"

    def __init__(self, database: DwgbDatabase, transport: DwgbTransport):
        """ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä """
        self.transport = transport
        self.database = database
        # –ó–∞–≥—Ä—É–∑–∏–º –±–∞–∑—É –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        if not DwgbCmdConst.STORE_DATA:
            self.database.exec(self.__QUERY_STORAGE_CREATE, {})
            self.reloadStorages()
        return

    def work(self, message: DwgbMessage):
        """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è """
        return False

    def reloadStorages(self, message: DwgbMessage = None):
        """ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–ª–∞–¥–∞ """
        tmp_raw = self.database.queryall(self.__QUERY_STORAGE_SHOW, {"owner": self.transport.ownerId})
        # –ó–∞–≥—Ä—É–∑–∏–º
        DwgbCmdConst.STORE_DATA = {}
        DwgbCmdConst.STORE_FREE = DwgbCmdConst.STORE_SIZE
        for tmp_row in tmp_raw:
            tmp_storage = self.getStorageRow(tmp_row)
            DwgbCmdConst.STORE_DATA[tmp_storage.id] = tmp_storage
            if tmp_storage.id != self._ITEM_GOLD and tmp_storage.id != self._ITEM_PAGE and tmp_storage.id != self._ITEM_SHARDS:
                DwgbCmdConst.STORE_FREE -= tmp_storage.count
        # –£–≤–µ–¥–æ–º–∏–º
        if message:
            self.transport.writeChannel("–ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω", message, True)

    def setBookPages(self, storage: DwgbStorage, count: int):
        """ –†–∞–∑–±–æ—Ä –∫–Ω–∏–≥ """
        tmp_page_count = DwgbCmdConst.STORE_DATA[self._ITEM_PAGE].count
        tmp_book_count = 0
        tmp_book_id = self.getBookPresent(storage)
        if tmp_book_id:
            for tmp_i in range(0, count):
                tmp_book_count += tmp_page_count >= (tmp_book_count + 1) * 5 and self.apiSell(tmp_book_id, 1)
        # –£–±–µ—Ä–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if tmp_book_count > 0:
            self.setStorage(0, self._ITEM_PAGE, -tmp_book_count * 5)
        # –£–≤–µ–ª–∏—á–∏–º –≤ –±–∞–∑–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        self.setStorage(0, storage.id, count, tmp_book_count)

    def getBookPresent(self, storage: DwgbStorage):
        """ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ """
        if storage.icon != "üìï" and storage.icon != "üìò":
            return None
        # –ü–æ–∏—â–µ–º
        for tmp_code, tmp_id in DwgbCmdConst.BOOKS:
            if storage.id == tmp_id:
                return tmp_code
        # –ö–Ω–∏–≥–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ –æ–ø–∏—Å–∞–Ω–∞
        return None

    def getAccountTag(self, peerid: int, name: str):
        """ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è """
        if peerid > 0:
            tmp_prefix = "@id"
        else:
            tmp_prefix = "@club"
        return "%s%s (%s)" % (tmp_prefix, peerid, name)

    def getRegex(self, pattern: str):
        """ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è """
        return re.compile(pattern, re.IGNORECASE | re.UNICODE | re.DOTALL | re.MULTILINE)

    def getStorageRow(self, row: dict):
        """ –†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ """
        if row is not None:
            tmp_storage = DwgbStorage()
            tmp_storage.id = row["item"]
            tmp_storage.short = row["short"]
            tmp_storage.cost = row["cost"]
            tmp_storage.limit = row["maxlimit"]
            tmp_storage.count = row["value"]
            tmp_storage.icon = row["icon"]
            tmp_storage.trade = row["trade"]
            tmp_storage.valueex = row["valueex"]
            tmp_storage.code = row["code"]
            tmp_storage.date = row["date"]
            return tmp_storage
        else:
            return row

    def getCostIn(self, cost: int):
        """ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–∏–µ–º–∞ """
        return int(cost * DwgbCmdConst.PERCENT_BUY)

    def getCostOut(self, cost: int):
        """ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ """
        return int(cost * DwgbCmdConst.PERCENT_SELL)

    def getCostFixed(self, cost: int, vol: float = 0.9):
        """ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —á–∏—Å—Ç–æ–π —Ü–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞ """
        return math.ceil(cost / vol)

    def getCostFloat(self, cost: int, vol: float = 0.9):
        """ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≥—Ä—è–∑–Ω–æ–π —Ü–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞ """
        return math.ceil(cost * vol)

    def setStorage(self, owner: int, itemid: str, value: int, valueex: int = 0):
        """ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ """
        value -= valueex
        # –î–ª—è —Å–∫–ª–∞–¥–∞ –æ–±–Ω–æ–≤–∏–º –∫—ç—à
        if not owner:
            owner = self.transport.getOwnerId()
            if itemid in DwgbCmdConst.STORE_DATA:
                tmp_data = DwgbCmdConst.STORE_DATA[itemid]
                tmp_data.count += value
                tmp_data.valueex += valueex
            # –ü–æ–ø—Ä–∞–≤–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
            if itemid != self._ITEM_GOLD and itemid != self._ITEM_PAGE and itemid != self._ITEM_SHARDS:
                DwgbCmdConst.STORE_FREE -= value
        # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ –±–∞–∑–µ
        self.database.exec(self.__QUERY_STORAGE_SET, {"owner": owner, "item": itemid, "value": value, "valueex": valueex})
        # –ü–µ—Ä–µ–≥—Ä—É–∑–∏–º –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        if itemid not in DwgbCmdConst.STORE_DATA:
            self.reloadStorages()

    def setBonus(self, message: DwgbMessage):
        """ –í—ã–±—Ä–æ—Å –±–æ–Ω—É—Å–Ω–æ–≥–æ –ª—É—Ç–∞ """
        tmp_bonus = []
        for tmp_item, tmp_storage in DwgbCmdConst.STORE_DATA.items():
            if tmp_storage.icon == "üçÑ" and tmp_storage.count > 0:
                tmp_bonus.append(tmp_storage.id)
        # –û–ø—Ä–µ–¥–µ–ª–∏–º
        if not tmp_bonus:
            return
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø
        tmp_item = tmp_bonus[random.randint(0, len(tmp_bonus) - 1)]
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–µ–∫—Å—Ç
        tmp_index = random.randint(1, 5)
        if tmp_index == 1:
            tmp_text = "üêæ–í—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ –∫–∞–∫ –≤ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–∞–∑ —Ç–µ–ª–µ–≥–∞ —Å —á—É–º–∞–∑—ã–º–∏ –≥–æ–±–ª–∏–Ω–∞–º–∏ –≤—Ä–µ–∑–∞–ª–∞—Å—å –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –≤ –ø–æ–ª–µ –∏ —Å –Ω–µ–µ —á—Ç–æ —Ç–æ –≤—ã–ø–∞–ª–æ..."
        elif tmp_index == 2:
            tmp_text = "üí•–í—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ –∫–∞–∫ —Ä—ã—Ü–∞—Ä—å –≤ —Å–∏—è—é—â–∏—Ö –¥–æ—Å–ø–µ—Ö–∞—Ö –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å –±–æ—Å—Å–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä—ã–≥–∞—é—â–∏—Ö —Ä—è–¥–æ–º –≥–Ω–æ–º–∏–∫–æ–≤. –û–Ω —á—Ç–æ —Ç–æ –±—Ä–æ—Å–∏–ª –∏–º, —á—Ç–æ–±—ã –æ—Ç–≤–ª–µ—á—å –æ—Ç —Å–µ–±—è..."
        elif tmp_index == 3:
            tmp_text = "üê∑–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å—Ç–∞—Ä–∞–Ω–∏—è –æ—Ä–∫–∞ –∏–∑ —Ç–∞–≤–µ—Ä–Ω—ã, —Å–Ω–µ–∂–æ–∫ –ø—Ä–∏–ª–µ—Ç–µ–ª –ø—Ä—è–º–æ –≤ –ª–æ–± –µ–≥–æ –ø—É–≥–∞–ª—É –Ω–∞ –ª—É–∂–∞–π–∫–µ –≥–æ—Ä–æ–¥–∞. –° –ø—É–≥–∞–ª–∞ —á—Ç–æ —Ç–æ –æ—Ç–ª–æ–º–∞–ª–æ—Å—å –∏ –ø–æ–∫–∞—Ç–∏–ª–æ—Å—å –∫ –≤–∞–º..."
        elif tmp_index == 4:
            tmp_text = "üëÄ–¢–∞—Ä–∞–∫–∞–Ω—ã? –£ –º–µ–Ω—è –Ω–µ—Ç —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤! –í—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞–º–µ—á–∞–π—Ç–µ –∏—Ö –∫–∞–∫ —è! –ö—Ä–∏—á–∞–ª —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –º–µ—Å—Ç–Ω–æ–≥–æ –±–æ—Ä–¥–µ–ª—è, —á—Ç–æ —Ç–æ –∫–∏–¥–∞—è –≤ –≤–∞—Å..."
        else:
            tmp_text = "üêÄ'–ù—É —Ç—ã –∑–∞—Ö–æ–¥–∏ –µ—Å–ª–∏ —á—Ç–æ' - –ø–æ—Å–ª—ã—à–∞–ª—Å—è –≤ –≥–æ–ª–æ—Å –≤–¥–∞–ª–µ–∫–µ - '–ò –∑–∞ —Å–æ–±–æ–π –∫–æ–≥–æ –Ω–∏–±—É–¥—å –ø—Ä–∏–≤–æ–¥–∏, —É –º–µ–Ω—è –ª—É—á—à–µ' - –ø—Ä–∏–≥–ª—è–¥–µ–≤—à–∏—Å—å, –≤—ã —É–≤–∏–¥–µ–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –º–∞—Å–∫–µ –∫–æ—Ç–∞ —Å –æ—á–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ—Å–∏–ª —Å–≤–æ–µ–º—É —Å–ø—É—Ç–Ω–∏–∫—É –∫–∞–∫—É—é-—Ç–æ –ø–æ–¥–∞—á–∫—É... "
        # –£–º–µ–Ω—å—à–∏–º –≤ –±–∞–∑—É
        self.setStorage(0, tmp_item, -1)
        # –û—Ç–ø—Ä–∞–≤–∏–º
        self.transport.writeChannel(tmp_text, message, False, -1)
        self.transport.removeChannel(self.transport.writeChannel("–ë—Ä–æ—Å–∏—Ç—å %s" % tmp_item, message, False, -1))

    def getStorageItem(self, owner: int, itemid: str, onlyvalue: bool = True):
        """ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ """
        tmp_result = self.database.queryone(self.__QUERY_STORAGE_GET, {"owner": owner, "item": itemid})
        if tmp_result is not None:
            if onlyvalue:
                return tmp_result["value"]
            else:
                return tmp_result
        else:
            return 0

    def getStorage(self, itemtype: str):
        """ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ """
        for tmp_item, tmp_storage in DwgbCmdConst.STORE_DATA.items():
            if tmp_item == itemtype:
                return tmp_storage
            if tmp_storage.short == itemtype:
                return tmp_storage
        # –ù–∏—á–µ–≥–æ—à–µ–Ω—å–∫–∏
        return None

    def apiQuery(self, data):
        """ Build PHP Array from JS Array """
        m_parents = list()
        m_pairs = dict()

        def renderKey(parents: list):
            """ Key decoration """
            depth, out_str = 0, ''
            for x in parents:
                s = "[%s]" if depth > 0 or isinstance(x, int) else "%s"
                out_str += s % str(x)
                depth += 1
            return out_str

        def r_urlencode(rawurl: str):
            """ Encode URL """
            if isinstance(rawurl, list) or isinstance(rawurl, tuple):
                for tmp_index in range(len(rawurl)):
                    m_parents.append(tmp_index)
                    r_urlencode(rawurl[tmp_index])
                    m_parents.pop()
            elif isinstance(rawurl, dict):
                for tmp_key, tmp_value in rawurl.items():
                    m_parents.append(tmp_key)
                    r_urlencode(tmp_value)
                    m_parents.pop()
            else:
                m_pairs[renderKey(m_parents)] = str(rawurl)
            return m_pairs

        return parse.urlencode(r_urlencode(data))

    def apiHeaders(self, lenght: int = 0, referer: str = "", host: str = "vip3.activeusers.ru"):
        """ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ """
        tmp_headers = {
            'Host': host,
            'Connection': 'keep-alive',
            'sec-ch-ua': '"Google Chrome";v="90", "Chromium";v="90", ";Not A Brand";v="100"',
            'Accept': 'application/json, text/javascript, */*; q=0.01',
            'DNT': '1',
            'X-Requested-With': 'XMLHttpRequest',
            'sec-ch-ua-mobile': '?0',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5388.36 (KHTML, like Gecko) Chrome/90.0.4389.90 Safari/537.36',
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'Origin': 'https://%s' % host,
            'Sec-Fetch-Site': 'same-origin',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Dest': 'empty',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'
        }
        if lenght:
            tmp_headers['Content-Length'] = str(lenght)
        if referer:
            tmp_headers['Referer']: referer
        return tmp_headers

    def apiUse(self, itemid: str, action: int, page: str):
        """ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ """
        tmp_data = {
            "id": itemid,
            "m": action
        }
        tmp_url = self._API_URL % (page, self.transport.api)
        tmp_referer = self._API_URL % (self._ACT_TYPE_ITEM % itemid, self.transport.api)
        # –û—Ç–ø—Ä–∞–≤–∏–º
        try:
            tmp_response = requests.post(tmp_url, tmp_data, headers=self.apiHeaders(7 + len(str(itemid)), tmp_referer))
            return tmp_response.ok and json.loads(tmp_response.text)["result"] == 1
        except Exception as e:
            print("Query failed %s %s" % (e, traceback.format_exc().replace("\n", " ")))
            return False

    def apiSell(self, itemid: str, action: int):
        """ –ü—Ä–æ–¥–∞–∂–∞ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ """
        return self.apiUse(itemid, action, "a_sell_item")

    def apiBuy(self, itemid: str, action: int):
        """ –ü–æ–∫—É–ø–∫–∞ –∏–ª–∏ —Å–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ """
        return self.apiUse(itemid, action, "a_get_item")
