"""
Baf command
"""

from datetime import timedelta, datetime

from .command_custom import DwgbCmdCustom
from ..classes import DwgbDatabase, DwgbTransport, DwgbMessage


class DwgbCmdBaf(DwgbCmdCustom):
    """ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –±–∞—Ñ–∞ """

    # –¶–µ–Ω–∞ –±–∞—Ñ–∞
    BAF_COST = 1

    def __init__(self, database: DwgbDatabase, transport: DwgbTransport):
        """ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä """
        super().__init__(database, transport)
        self.regApp = self.getRegex(r"^–∞–ø–æ (\d+)")
        self.regGet = self.getRegex(r"^(?:\[.+?\]|—Ö–æ—á—É) –±–∞—Ñ (.+)")
        self.regSet = self.getRegex(r"^‚ú®\[id(\d+)\|(.+?)], –Ω–∞ –í–∞—Å –Ω–∞–ª–æ–∂–µ–Ω–æ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ ")
        self.regCon = self.getRegex(r"^–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ .+")
        self.avail = False
        self.apos = 0
        self.time = datetime.min

    def work(self, message: DwgbMessage):
        """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è """
        # –ù–∞–π–¥–µ–Ω —Ñ–∞–∫—Ç –±–∞—Ñ–∞
        tmp_match = self.regCon.match(message.text)
        if tmp_match:
            return self.useCon(message)
        # –ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω–∞ –∞–ø–æ—Å—Ç–æ–ª–∞
        tmp_match = self.regApp.match(message.text)
        if tmp_match:
            return self.useApp(message, tmp_match)
        # –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ—Å—å–±–∞ –±–∞—Ñ–∞
        tmp_match = self.regGet.match(message.text)
        if tmp_match:
            return self.useBaf(message, tmp_match)
        # –ù–∞–π–¥–µ–Ω–æ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –±–∞—Ñ–∞
        tmp_match = self.regSet.match(message.text)
        if tmp_match:
            return self.usePay(message, tmp_match)
        # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        return False

    def useCon(self, message: DwgbMessage):
        """ –ë—ã–ª –±–∞—Ñ """
        self.apos = message.user
        return True

    def useApp(self, message: DwgbMessage, data: dict):
        """ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –±–∞—Ñ–µ—Ä–∞ """
        self.avail = data[1] == "1"
        # Adding to clear
        self.transport.clearQueue(message.id)
        # Not me
        if not self.avail:
            return True
        tmp_time = datetime.today()
        if tmp_time < self.time:
            tmp_time = (self.time - tmp_time).total_seconds()
            tmp_min = int(tmp_time / 60)
            tmp_sec = int(tmp_time % 60)
            tmp_time = "‚åõ"
            if tmp_min > 0:
                tmp_time += " %s –º–∏–Ω." % tmp_min
            tmp_time += " %s —Å–µ–∫." % tmp_sec
        else:
            tmp_time = "‚åõ –¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ–∂–∏—Ç—å)"
        self.transport.writeChannel(tmp_time, message, True)
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        return True

    def useBaf(self, message: DwgbMessage, data: dict):
        """ –ù–∞–ª–æ–∂–µ–Ω–∏–µ –±–∞—Ñ–∞ """
        if self.avail:
            self.transport.writeChannel("–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ %s" % (data[1]), message, True)
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        return True

    def usePay(self, message: DwgbMessage, data: dict):
        """ –£—á–µ—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏—è –±–∞—Ñ–∞ """
        # –ò–≥–Ω–æ—Ä —Ñ–∞–ª—å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if message.user != self._DW_BOT_ID:
            return False
        # –°–æ–±–µ—Ä–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å–∞–º–æ–±–∞—Ñ –∏–≥–Ω–æ—Ä–∏–º
        tmp_id = int(data[1])
        if tmp_id == self.apos:
            return True
        # –£–º–µ–Ω—å—à–∏–º –±–∞–ª–∞–Ω—Å –∑–∞ –±–∞—Ñ
        self.setStorage(tmp_id, self._ITEM_GOLD, -self.BAF_COST)
        # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞—Ñ–∞
        if self.avail:
            self.time = datetime.today() + timedelta(minutes=15)
        if self.apos != self.transport.getOwnerId():
            self.setStorage(self.apos, self._ITEM_GOLD, self.BAF_COST)
            self.transport.writeChannel("[id%s|–ê–ø–æ—Å—Ç–æ–ª], –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ üåï%s" % (self.apos, self.BAF_COST), message, False)
        # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.transport.writeChannel("%s, –í–∞—à –±–∞–ª–∞–Ω—Å: üåï%s" % (self.getAccountTag(tmp_id, data[2]), self.getStorageItem(tmp_id, self._ITEM_GOLD)), message, False)
        # –í—Å–µ —Ö–æ—Ä–æ—à–æ
        return True
