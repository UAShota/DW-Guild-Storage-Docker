"""
Gold transfering
"""

from .command_custom import DwgbCmdCustom, DwgbCmdConst
from ..classes import DwgbDatabase, DwgbTransport, DwgbMessage, DwgbTransfer


class DwgbCmdTransferGold(DwgbCmdCustom):
    """ –£—á–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞ """

    def __init__(self, database: DwgbDatabase, transport: DwgbTransport):
        """ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä """
        super().__init__(database, transport)
        self.regGold = self.getRegex(r"^üåï\[id(\d+)\|(.+?)], –ø–æ–ª—É—á–µ–Ω–æ (\d+) –∑–æ–ª–æ—Ç–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞ \[id(\d+)\|(.+?)]")
        self.regShard = self.getRegex(r"^üíé\[id(\d+)\|(.+?)], –ø–æ–ª—É—á–µ–Ω–æ (\d+) –æ—Å–∫–æ–ª–∫–æ–≤ —Å–µ—Ä–¥—Ü–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞ \[id(\d+)\|(.+?)]")

    def work(self, message: DwgbMessage):
        """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if message.user != self._DW_BOT_ID:
            return False
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–ª–æ—Ç–∞
        tmp_data = self.regGold.match(message.text)
        if tmp_data:
            return self.usegold(message, tmp_data)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–∫–æ–ª–∫–æ–≤
        tmp_data = self.regShard.match(message.text)
        if tmp_data:
            return self.useshards(message, tmp_data)
        # –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–µ –¥–ª—è —Å–∫–ª–∞–¥–∞
        return False

    def send(self, message: DwgbMessage, name: str, count: int):
        """ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ """
        self.transport.writeChannel("%s, –í–∞—à –±–∞–ª–∞–Ω—Å: üåï%s" % (name, count), message, False)
        return True

    def gettransfer(self, data: dict):
        """ –†–∞–∑–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥–∞—á–∏ """
        tmp_transfer = DwgbTransfer()
        tmp_transfer.sourceId = int(data[1])
        tmp_transfer.sourceName = data[2]
        tmp_transfer.count = int(data[3])
        tmp_transfer.targetId = int(data[4])
        tmp_transfer.targetName = data[5]
        # –í–µ—Ä–Ω–µ–º
        return tmp_transfer

    def usegold(self, message: DwgbMessage, data: dict):
        """ –ü–µ—Ä–µ–¥–∞—á–∞ –æ—Å–∫–æ–ª–∫–æ–≤ """
        tmp_transfer = self.gettransfer(data)
        # –§–∏–∫—Å–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ —Å–∫–ª–∞–¥
        if tmp_transfer.sourceId == self.transport.getOwnerId():
            return self.goldin(message, tmp_transfer)
        # –§–∏–∫—Å–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ —Å–∫–ª–∞–¥–∞
        if tmp_transfer.targetId == self.transport.getOwnerId():
            return self.goldout(message, tmp_transfer)

    def useshards(self, message: DwgbMessage, data: dict):
        """ –ü–µ—Ä–µ–¥–∞—á–∞ –∑–æ–ª–æ—Ç–∞ """
        tmp_transfer = self.gettransfer(data)
        # –§–∏–∫—Å–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ —Å–∫–ª–∞–¥
        if tmp_transfer.sourceId == self.transport.getOwnerId():
            return self.shardsin(message, tmp_transfer)
        # –§–∏–∫—Å–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ —Å–∫–ª–∞–¥–∞
        if tmp_transfer.targetId == self.transport.getOwnerId():
            return self.shardsout(message, tmp_transfer)

    def goldin(self, message: DwgbMessage, transfer: DwgbTransfer):
        """ –£—á–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –∑–æ–ª–æ—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥ """
        # –£–≤–µ–ª–∏—á–∏–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        self.setStorage(transfer.targetId, self._ITEM_GOLD, transfer.count)
        # –£–≤–µ–ª–∏—á–∏–º –±–∞–ª–∞–Ω—Å —Å–∫–ª–∞–¥–∞
        self.setStorage(0, self._ITEM_GOLD, transfer.count)
        # –£–≤–µ–¥–æ–º–∏–º
        return self.send(message, self.getAccountTag(transfer.targetId, transfer.targetName), self.getStorageItem(transfer.targetId, self._ITEM_GOLD))

    def goldout(self, message: DwgbMessage, transfer: DwgbTransfer):
        """ –£—á–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –∑–æ–ª–æ—Ç–∞ —Å–æ —Å–∫–ª–∞–¥–∞ """
        # –£–º–µ–Ω—å—à–∏–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        self.setStorage(transfer.sourceId, self._ITEM_GOLD, -self.getCostFixed(transfer.count))
        # –£–º–µ–Ω—å—à–∏–º –±–∞–ª–∞–Ω—Å —Å–∫–ª–∞–¥–∞
        self.setStorage(0, self._ITEM_GOLD, -self.getCostFixed(transfer.count))
        # –£–≤–µ–¥–æ–º–∏–º
        return self.send(message, self.getAccountTag(transfer.sourceId, transfer.sourceName), self.getStorageItem(transfer.sourceId, self._ITEM_GOLD))

    def shardsin(self, message: DwgbMessage, transfer: DwgbTransfer):
        """ –£—á–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Å–∫–æ–ª–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥ """
        # –£–≤–µ–ª–∏—á–∏–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        self.setStorage(transfer.targetId, self._ITEM_GOLD, transfer.count * self.getCostIn(DwgbCmdConst.STORE_DATA[self._ITEM_SHARDS].cost) // 100)
        # –£–≤–µ–ª–∏—á–∏–º –±–∞–ª–∞–Ω—Å —Å–∫–ª–∞–¥–∞
        self.setStorage(0, self._ITEM_SHARDS, transfer.count)
        # –£–≤–µ–¥–æ–º–∏–º
        return self.send(message, self.getAccountTag(transfer.targetId, transfer.targetName), self.getStorageItem(transfer.targetId, self._ITEM_GOLD))

    def shardsout(self, message: DwgbMessage, transfer: DwgbTransfer):
        """ –£—á–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Å–∫–æ–ª–∫–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞ """
        # –£–º–µ–Ω—å—à–∏–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        self.setStorage(transfer.sourceId, self._ITEM_GOLD, -transfer.count * self.getCostOut(DwgbCmdConst.STORE_DATA[self._ITEM_SHARDS].cost) // 100)
        # –£–º–µ–Ω—å—à–∏–º –±–∞–ª–∞–Ω—Å —Å–∫–ª–∞–¥–∞
        self.setStorage(0, self._ITEM_SHARDS, -self.getCostFixed(transfer.count, 0.95))
        # –£–≤–µ–¥–æ–º–∏–º
        return self.send(message, self.getAccountTag(transfer.sourceId, transfer.sourceName), self.getStorageItem(transfer.sourceId, self._ITEM_GOLD))
