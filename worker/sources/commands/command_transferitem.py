"""
Item transfering
"""
import random

from .command_custom import DwgbCmdCustom, DwgbCmdConst
from ..classes import DwgbDatabase, DwgbTransport, DwgbMessage, DwgbTransfer, DwgbStorage


class DwgbCmdTransferItem(DwgbCmdCustom):
    """ –£—á–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ """

    def __init__(self, database: DwgbDatabase, transport: DwgbTransport):
        """ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä """
        super().__init__(database, transport)
        self.regGet = self.getRegex(r"^üëù\[id(\d+)\|(.+?)], –ø–æ–ª—É—á–µ–Ω–æ: .(?:(\d+).+?)?(.+?) –æ—Ç –∏–≥—Ä–æ–∫–∞ \[id(\d+)\|(.+?)]")
        self.loot = u"üõ°"

    def work(self, message: DwgbMessage):
        """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if message.user != self._DW_BOT_ID:
            return False
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥—É–ª—è—Ä–∫–∏
        tmp_data = self.regGet.match(message.text)
        if not tmp_data:
            return False
        # –ù–∞—á–Ω–µ–º —Å–±–æ—Ä
        tmp_transfer = DwgbTransfer()
        tmp_transfer.message = message
        tmp_transfer.sourceId = int(tmp_data[1])
        tmp_transfer.sourceName = tmp_data[2]
        tmp_transfer.type = tmp_data[4].lower()
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ = –∑–Ω–∞—á–∏—Ç 1 —à—Ç—É–∫–∞
        if tmp_data[3]:
            tmp_transfer.count = int(tmp_data[3])
        else:
            tmp_transfer.count = 1
        tmp_transfer.targetId = int(tmp_data[5])
        tmp_transfer.targetName = tmp_data[6]
        tmp_transfer.item = self.getStorage(tmp_transfer.type)
        # –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–∞ —Å–∫–ª–∞–¥
        if tmp_transfer.sourceId == self.transport.getOwnerId():
            if (not tmp_transfer.item) or (tmp_transfer.item.cost == 0):
                return self.incomingFree(tmp_transfer)
            else:
                return self.incomingPaid(tmp_transfer)
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ —Å–∫–ª–∞–¥–∞
        if tmp_transfer.targetId == self.transport.getOwnerId():
            if (not tmp_transfer.item) or (tmp_transfer.item.cost == 0):
                return self.outDoorFree(tmp_transfer)
            else:
                return self.outDoorPaid(tmp_transfer)
        # –ù–∏—á–µ–≥–æ—à–µ–Ω—å–∫–∏
        return False

    def incomingFree(self, transfer: DwgbTransfer):
        """ –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–∞ —Å–∫–ª–∞–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑ —Ü–µ–Ω—ã """
        # –£–≤–µ–ª–∏—á–∏–º –≤ –±–∞–∑–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        self.setStorage(0, transfer.type, transfer.count)
        # –£–≤–µ–¥–æ–º–∏–º
        self.transport.writeChannel("%s, %s %s –≤–∑—è—Ç–æ –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ" % (self.getAccountTag(transfer.targetId, transfer.targetName), transfer.count, transfer.type), transfer.message, False)
        return True

    def incomingPaid(self, transfer: DwgbTransfer):
        """ –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–∞ —Å–∫–ª–∞–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —Ü–µ–Ω–æ–π """
        self.setBookPages(transfer.item, transfer.count)
        # –£–≤–µ–ª–∏—á–∏–º –≤ –±–∞–∑–µ –±–∞–ª–∞–Ω—Å
        tmp_cost = self.getCostIn(transfer.item.cost) * transfer.count
        self.setStorage(transfer.targetId, self._ITEM_GOLD, tmp_cost)
        # –£–≤–µ–¥–æ–º–∏–º
        self.transport.writeChannel("%s, %s %s –ø—Ä–∏–Ω—è—Ç–æ –∑–∞ üåï%s. –í–∞—à –±–∞–ª–∞–Ω—Å üåï%s üì¶%d/%d" % (self.getAccountTag(transfer.targetId, transfer.targetName), transfer.count, transfer.item.id, tmp_cost, self.getStorageItem(transfer.targetId, self._ITEM_GOLD), DwgbCmdConst.STORE_SIZE - DwgbCmdConst.STORE_FREE, DwgbCmdConst.STORE_SIZE), transfer.message, False)
        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏
        if transfer.item.icon != self.loot:
            return True
        tmp_item: DwgbStorage = DwgbCmdConst.STORE_DATA[transfer.item.id]
        if not tmp_item.code:
            return True
        # –ü—Ä–æ–¥–∞–¥–∏–º –∏–∑–ª–∏—à–∫–∏
        for tmp_i in range(1, tmp_item.count):
            if self.apiSell(tmp_item.code, 1):
                self.setStorage(0, tmp_item.id, -1)
                self.setStorage(0, self._ITEM_GOLD, tmp_item.cost)
        return True

    def outDoorFree(self, transfer: DwgbTransfer):
        """ –ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ —Å–∫–ª–∞–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑ —Ü–µ–Ω—ã """
        # –£–º–µ–Ω—å—à–∏–º –≤ –±–∞–∑–µ
        self.setStorage(0, transfer.type, -transfer.count)
        # –£–≤–µ–¥–æ–º–∏–º
        self.transport.writeChannel("%s, %s %s –≤–∑—è—Ç–æ –≤ –∞—Ä–µ–Ω–¥—É" % (self.getAccountTag(transfer.sourceId, transfer.sourceName), transfer.count, transfer.type), transfer.message, False)
        return True

    def outDoorPaid(self, transfer: DwgbTransfer):
        """ –ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ —Å–∫–ª–∞–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —Ü–µ–Ω–æ–π """
        # –£–º–µ–Ω—å—à–∏–º –≤ –±–∞–∑–µ
        self.setStorage(0, transfer.item.id, -transfer.count)
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ü–µ–Ω—É
        tmp_cost = self.getCostOut(transfer.item.cost) * transfer.count
        # –ü—Ä–æ—Å—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å
        tmp_discount = random.randint(1, 100)
        if tmp_discount > 10:
            tmp_discount = 0
        # –£—á–µ—Ç –±–æ–Ω—É—Å–∞
        if tmp_discount:
            tmp_cost -= int(tmp_cost / 100 * tmp_discount)
            tmp_text = "üëù–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞! –°—Ç–æ–∏–º–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ %s%%! üçÄ" % tmp_discount
        else:
            tmp_text = ""
        # –£–º–µ–Ω—å—à–∏–º –≤ –±–∞–∑–µ
        self.setStorage(transfer.sourceId, self._ITEM_GOLD, -tmp_cost)
        # –£–≤–µ–¥–æ–º–∏–º
        self.transport.writeChannel("%s, –∑–∞ %s –æ–ø–ª–∞—á–µ–Ω–æ üåï%s. –í–∞—à –±–∞–ª–∞–Ω—Å: üåï%s üì¶%d/%d %s" % (self.getAccountTag(transfer.sourceId, transfer.sourceName), transfer.item.id, tmp_cost, self.getStorageItem(transfer.sourceId, self._ITEM_GOLD), DwgbCmdConst.STORE_SIZE - DwgbCmdConst.STORE_FREE, DwgbCmdConst.STORE_SIZE, tmp_text), transfer.message, False)
        return True
